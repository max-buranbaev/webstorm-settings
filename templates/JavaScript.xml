<templateSet group="JavaScript">
  <template name="reducer" value="// @flow&#10;import { ACTIONS } from '../constants'&#10;&#10;const initialState = {}&#10;&#10;const reducer = (state: Object = initialState, action: Object) =&gt; {&#10;  const { type, payload } = action&#10;  const reducer = {&#10;    [ACTION]: () =&gt; ({ ...state, all: payload }),&#10;  }&#10;&#10;  return reducer.hasOwnProperty(type) ? reducer[type].call(null, state, action) : state&#10;}&#10;&#10;export default reducer&#10;" description="Default reducer" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="reactcmp" value="import React from 'react'&#10;import { connect } from 'react-redux'&#10;&#10;class $name$ extends React.Component {&#10;  constructor (props) {&#10;    super(props)&#10;    this.state = {}&#10;  }&#10;&#10;  render () {&#10;    return &lt;h2&gt;$name$&lt;/h2&gt;&#10;  }&#10;}&#10;&#10;const mapDispatchToProps = {}&#10;&#10;const mapStateToProps = state =&gt; ({})&#10;&#10;export default connect(mapStateToProps, mapDispatchToProps)($name$)&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JSX_HTML" value="true" />
    </context>
  </template>
  <template name="reactfn" value="import React from 'react'&#10;&#10;const $name$ = props =&gt; {&#10;    return (&#10;        &lt;h2&gt; Here is $name$ &lt;/h2&gt;&#10;    )&#10;}&#10;&#10;export default $name$" description="react function component" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>